

=================== 关于几何体 =====================================
        geometry 几何体 
        cube 方块（1,1,1）
        plane 平面（1,1）
        geometry 几何体
        sphere 球体（radius，X,X）
==================  关于网格对象 ===================================
var x=new THREE.Mesh(geometry,Material)
mesh 网格
material 材质
MeshBasicMaterial：对光照无感，给几何体一种简单的颜色或显示线框
MeshLambertMaterial：这种材质对光照有反应，用于创建暗淡的不发光的物体
MeshPhongMaterial：这种材质对光照也有反应，用于创建金属类明亮的物体

==================== 光     ===================================

SpotLight 聚光灯源-具有锥形效果的光源
AmbientLight-影响整个场景的光源
PointLight-照射所有方向的光源
DirectionalLight-模拟远处类似太阳的光源



=====================关于 场景  ================================
    scene.fog=new THREE.Fog('#cacaca',0.5,70)  雾化
到目前为止 和场景相关的函数
Scene.add()  添加
Scene.remove  删除
Scene.children() 获取场景的子对象列表
Scene.getChildByName()  利用name属性，获取场景中某个特定的物体

    
 ====================定义点==================
 THREE.Vector3 = function ( x, y, z ) {

this.x = x || 0;
this.y = y || 0;
this.z = z || 0;

};
====================关于 renderer ==============
renderer=new THREE.render({antialias : true})
antialias : true  这个抗锯齿
要注意 
renderer.setSize(x,y)
renderer.setClearColor(0xffff00,0.5)//后面是透明度

=====================关于 基本材质===================
http://www.ituring.com.cn/article/51315
列子 PlaneGeometry  只有一面有颜色？   在Material({side:THREE.DoubleSide})

visible：是否可见，默认为true
side：渲染面片正面或是反面，默认为正面THREE.FrontSide，可设置为反面THREE.BackSide，或双面THREE.DoubleSide
wireframe：是否渲染线而非面，默认为false
color：十六进制RGB颜色，如红色表示为0xff0000
map：使用纹理贴图，详见4.5节

================== 关于 纹理 贴图（canvas）======================
var texture=new THREE.Texture(canvas)
cube=new THREE.Mesh(geometry,new THREE.MeshBasicMaterial({map:texture,transparent:true，opacity:0.5}))

三个地方要设置
texture.needsUpdate=true       transparent(透明的）：true    depthWrite:fals

重点！
texture.needsUpdate=true       transparent(透明的）：true   
 第一个不设置 没效果 出不来         定义此材质是否是透明的。这对渲染效果有影响，因为透明物体需要特殊的处理，并在所有非透明物体之后被渲染。 对于该                                   行为的一个实际例子，请查看 WebGLRenderer 代码。
                                当设置为true时，该材料的透明度由 opacity 属性所确定。
                                缺省是 false.

depthWrite:false (简单的讲， 前后重叠的时候，有时候会看到纹理的黑色背景  设置成false 后就好了)
渲染此材质是否对深度缓冲区有什么影响。缺省为 true.
当绘制二维叠加图层时，可以禁用深度写入， 
http://techbrood.com/threejs/docs/#参考手册/材料(Materials)/材料(Material)
材料链接

======================关于 物体移动 旋转==============================
有position.set  position.x=num   rotation.x=num     
 translateX(num)  translateZ(num)                rotateX(num)
前面和后面的区别是  前者都是以世界坐标轴 来设置的
后者 以自己来设置    前者 是对象属性，后者方法

===========================封装 好的 control 事件======
var clickFlag=true
window.addEventListener('keydown',mouseMove,false)
window.addEventListener('mousedown',mouseDown,false)
window.addEventListener('mouseup',mouseUp,false)
function mouseMove(e){
    console.log(e.keyCode)
    //W  87   S83  A 65  D68
    //
    switch(e.keyCode){
      case 87:
       case 38:
      camera.translateZ(-1.6);
      break;
      case 83:
      case 40:
      camera.translateZ(1.6);
      break;
      case 65:
      case 37:
      camera.translateX(-1.6);
      break;
      case 68:
      case 39:
      camera.translateX(1.6);
      break;
      case 32:
      camera.translateY(1.6)
      break;
      case 90:
      camera.translateY(-1.6);
      break;
    }
  }
  function mouseDown(e){
    clickFlag=true
    var eX=e.clientX
     var eY=e.clientY
      window.onmousemove=function(e){
          if(clickFlag){
            camera.rotateY(-(e.clientX-eX)/20000)
             camera.rotateX(-(e.clientY-eY)/200000)
      }
    }
  }
  function mouseUp(){
    clickFlag=false
  }
